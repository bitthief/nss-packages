diff --git a/frontends/cmn/ecm_ipv4.c b/frontends/cmn/ecm_ipv4.c
index f69eb45c135be420968bc2de1101c3220a8faeb6..cac02b4bef4fb4da2d5b8411efeb496a6d406db9 100644
--- a/frontends/cmn/ecm_ipv4.c
+++ b/frontends/cmn/ecm_ipv4.c
@@ -1502,6 +1502,37 @@ vxlan_done:
 #endif
 }
 
+/*
+ * ecm_ipv4_is_bridge_pkt()
+ *	Return true if pkt is from bridge flow.
+ *	If in/out dev is a bridge port and the other dev is a master
+ *	of the same bridge port dev, then consider it a bridge flow packetÂ 
+ *	and return true.
+ */
+static bool ecm_ipv4_is_bridge_pkt(struct net_device *in,
+		struct net_device *out)
+{
+	struct net_device *lower = NULL;
+	struct net_device *upper = NULL;
+	struct net_device *bridge = NULL;
+
+	if (in->priv_flags & IFF_BRIDGE_PORT) {
+		lower = in;
+		bridge = out;
+	} else if (out->priv_flags & IFF_BRIDGE_PORT) {
+		lower = out;
+		bridge = in;
+	}
+
+	if (!lower)
+		return false;
+
+	rcu_read_lock();
+	upper = netdev_master_upper_dev_get_rcu(lower);
+	rcu_read_unlock();
+	return upper && (upper == bridge);
+}
+
 /*
  * ecm_ipv4_post_routing_hook()
  *	Called for IP packets that are going out to interfaces after IP routing stage.
@@ -1572,6 +1603,14 @@ static unsigned int ecm_ipv4_post_routing_hook(void *priv,
 		return NF_ACCEPT;
 	}
 
+	/*
+	 * Skip bridge flow packet
+	 */
+	if (ecm_ipv4_is_bridge_pkt(in, out)) {
+		DEBUG_TRACE("Bridge flow, ignoring: %px\n", skb);
+		dev_put(in);
+		return NF_ACCEPT;
+	}
 #ifndef ECM_INTERFACE_OVS_BRIDGE_ENABLE
 	/*
 	 * skip OpenVSwitch flows because we don't accelerate them
